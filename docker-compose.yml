services:
  postgres-order:
    container_name: postgres-order
    image: postgres
    environment:
      POSTGRES_DB: order-service
      POSTGRES_USER: suraj
      POSTGRES_PASSWORD: password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - ./postgres-order:/var/lib/postgresql/data/pgdata
    ports:
      - "6431:6431"
    command: ["postgres", "-p", "6431"]
    networks:
      - app-network
    restart: always

  postgres-inventory:
    container_name: postgres-inventory
    image: postgres
    environment:
      POSTGRES_DB: inventory-service
      POSTGRES_USER: suraj
      POSTGRES_PASSWORD: password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - ./postgres-inventory:/var/lib/postgresql/data/pgdata
    ports:
      - "6432:6432"
    command: ["postgres", "-p", "6432"]
    networks:
      - app-network
    restart: always

  mongo:
    container_name: mongo
    image: mongo:4.4.14-rc0-focal
    ports:
      - "27017:27017"
    volumes:
      - ./mongo-data:/data/db
    networks:
      - app-network
    restart: always

  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password
    volumes:
      - ./mysql_keycloak_data:/var/lib/mysql
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:26.2.5
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    entrypoint: ["/opt/keycloak/bin/keycloak-entrypoint.sh"]
    ports:
      - "8080:8080"
    volumes:
      - ./realms/:/opt/keycloak/data/import/
      - ./wait-for-it.sh:/opt/keycloak/bin/wait-for-it.sh
      - ./keycloak-entrypoint.sh:/opt/keycloak/bin/keycloak-entrypoint.sh
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network

  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - app-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8085:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=broker:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    networks:
      - app-network

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - app-network

  discovery-server:
    container_name: discovery-server
    build:
      context: ./discovery-server
    ports:
      - "9761:9761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - app-network
    volumes:
      - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    command: ["wait-for-it.sh", "zipkin:9411", "--", "java", "-jar", "app.jar"]

  api-gateway:
    container_name: api-gateway
    build:
      context: ./api-gateway
    ports:
      - "9191:9191"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=TRACE
    networks:
      - app-network
    volumes:
      - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    command: ["wait-for-it.sh", "discovery-server:9761", "--", "java", "-jar", "app.jar"]

  product-service:
    container_name: product-service
    build:
      context: ./product-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - app-network
    volumes:
      - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    command: [ "wait-for-it.sh", "discovery-server:9761", "--", "wait-for-it.sh", "mongo:27017", "--", "java", "-jar", "app.jar" ]



  order-service:
    container_name: order-service
    build:
      context: ./order-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-order:6431/order-service
    networks:
      - app-network
    volumes:
      - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    command: ["wait-for-it.sh", "postgres-order:6431", "--", "java", "-jar", "app.jar"]

  inventory-service:
    container_name: inventory-service
    build:
      context: ./inventory-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-inventory:6432/inventory-service
    networks:
      - app-network
    volumes:
      - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    command: ["wait-for-it.sh", "postgres-inventory:6432", "--", "java", "-jar", "app.jar"]

  notification-service:
    container_name: notification-service
    build:
      context: ./notification-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - app-network
    volumes:
      - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    command: ["wait-for-it.sh", "broker:9092", "--", "java", "-jar", "app.jar"]

networks:
  app-network:
    driver: bridge
